// Feather disable all

/// Returns whether a Bonk sphere and quad overlap.
/// 
/// @param sphere
/// @param quad

// TODO - Optimize

function BonkSphereInsideQuad(_sphere, _quad)
{
    with(_sphere)
    {
        var _radius = radius;
        var _sphX = x;
        var _sphY = y;
        var _sphZ = z;
    }
    
    with(_quad)
    {
        //Quad struct is ordered P1, P2, P4 in a clockwise order. P3 is generated by `P2 - (P1 - P4)` a.k.a. `P4 + (P2 - P1)`
        
        var _quadX1 = x1;
        var _quadY1 = y1;
        var _quadZ1 = z1;
        
        var _quadX2 = x2;
        var _quadY2 = y2;
        var _quadZ2 = z2;
        
        var _quadX4 = x3;
        var _quadY4 = y3;
        var _quadZ4 = z3;
        
        var _dX12 = _quadX2 - _quadX1;
        var _dY12 = _quadY2 - _quadY1;
        var _dZ12 = _quadZ2 - _quadZ1;
        
        var _dX41 = _quadX1 - _quadX4;
        var _dY41 = _quadY1 - _quadY4;
        var _dZ41 = _quadZ1 - _quadZ4;
        
        var _normalX = _dZ12*_dY41 - _dY12*_dZ41;
        var _normalY = _dX12*_dZ41 - _dZ12*_dX41;
        var _normalZ = _dY12*_dX41 - _dX12*_dY41;
        
        var _length = sqrt(_normalX*_normalX + _normalY*_normalY + _normalZ*_normalZ);
        if (_length <= 0)
        {
            return false;
        }
        
        _normalX /= _length
        _normalY /= _length;
        _normalZ /= _length;
        
        var _quadX3 = _quadX2 - _dX41;
        var _quadY3 = _quadY2 - _dY41;
        var _quadZ3 = _quadZ2 - _dZ41;
    }
    
    //Distance from the sphere's centre to the plane
    var _dist = dot_product_3d(_sphX - _quadX1, _sphY - _quadY1, _sphZ - _quadZ1, _normalX, _normalY, _normalZ);
    
    //Early out if the sphere is too far away from the plane
    if ((_dist < -_radius) || (_dist > _radius))
    {
        return false;
    }
    
    //Point on the plane closest to the sphere's centre
    var _pX = _sphX - _normalX*_dist;
    var _pY = _sphY - _normalY*_dist;
    var _pZ = _sphZ - _normalZ*_dist;
    
    //Remembering that P3 is generated by `P2 - (P1 - P4)`
    var _dX23 = -_dX41;
    var _dY23 = -_dY41;
    var _dZ23 = -_dZ41;
    
    //Remembering that P3 can also be generated by `P4 + (P2 - P1)`
    var _dX34 = -_dX12;
    var _dY34 = -_dY12;
    var _dZ34 = -_dZ12;
    
    var _cross12 = variable_clone(__BonkCrossProduct(_pX - _quadX1, _pY - _quadY1, _pZ - _quadZ1, _dX12, _dY12, _dZ12));
    var _cross23 = variable_clone(__BonkCrossProduct(_pX - _quadX2, _pY - _quadY2, _pZ - _quadZ2, _dX23, _dY23, _dZ23));
    var _cross34 = variable_clone(__BonkCrossProduct(_pX - _quadX3, _pY - _quadY3, _pZ - _quadZ3, _dX34, _dY34, _dZ34));
    var _cross41 = variable_clone(__BonkCrossProduct(_pX - _quadX4, _pY - _quadY4, _pZ - _quadZ4, _dX41, _dY41, _dZ41));
    
    var _dot12 = dot_product_3d(_cross12.x, _cross12.y, _cross12.z, _normalX, _normalY, _normalZ);
    var _dot23 = dot_product_3d(_cross23.x, _cross23.y, _cross23.z, _normalX, _normalY, _normalZ);
    var _dot34 = dot_product_3d(_cross34.x, _cross34.y, _cross34.z, _normalX, _normalY, _normalZ);
    var _dot41 = dot_product_3d(_cross41.x, _cross41.y, _cross41.z, _normalX, _normalY, _normalZ);
    
    if ((_dot12 >= 0) && (_dot23 >= 0) && (_dot34 >= 0) && (_dot41 >= 0))
    {
        return true;
    }
    else
    {
        var _funcClosestPointOnLineSegment = function(_pX, _pY, _pZ, _x1, _y1, _z1, _dX, _dY, _dZ)
        {
            static _result = {};
            
            var _t = dot_product_3d(_pX - _x1, _pY - _y1, _pZ - _z1,   _dX, _dY, _dZ) / (_dX*_dX + _dY*_dY + _dZ*_dZ);
            _t = clamp(_t, 0, 1);
            
            with(_result)
            {
                x = _x1 + _t*_dX;
                y = _y1 + _t*_dY;
                z = _z1 + _t*_dZ;
            }
            
            return _result;
        }
        
        var _radiusSqr = _radius*_radius;
        
        //edge 1 -> 2
        var _pointEdge12 = _funcClosestPointOnLineSegment(_pX, _pY, _pZ,   _quadX1, _quadY1, _quadZ1,   _dX12, _dY12, _dZ12);
        var _vX = _sphX - _pointEdge12.x;
        var _vY = _sphY - _pointEdge12.y;
        var _vZ = _sphZ - _pointEdge12.z;
        var _distSqrEdge12 = _vX*_vX + _vY*_vY + _vZ*_vZ;
        
        //edge 2 -> 3
        var _pointEdge23 = _funcClosestPointOnLineSegment(_pX, _pY, _pZ,   _quadX2, _quadY2, _quadZ2,   _dX23, _dY23, _dZ23);
        var _vX = _sphX - _pointEdge23.x;
        var _vY = _sphY - _pointEdge23.y;
        var _vZ = _sphZ - _pointEdge23.z;
        var _distSqrEdge23 = _vX*_vX + _vY*_vY + _vZ*_vZ;
        
        //edge 3 -> 4
        var _pointEdge34 = _funcClosestPointOnLineSegment(_pX, _pY, _pZ,   _quadX3, _quadY3, _quadZ3,   _dX34, _dY34, _dZ34);
        var _vX = _sphX - _pointEdge34.x;
        var _vY = _sphY - _pointEdge34.y;
        var _vZ = _sphZ - _pointEdge34.z;
        var _distSqrEdge34 = _vX*_vX + _vY*_vY + _vZ*_vZ;
        
        //edge 4 -> 1
        var _pointEdge41 = _funcClosestPointOnLineSegment(_pX, _pY, _pZ,   _quadX4, _quadY4, _quadZ4,   _dX41, _dY41, _dZ41);
        var _vX = _sphX - _pointEdge41.x;
        var _vY = _sphY - _pointEdge41.y;
        var _vZ = _sphZ - _pointEdge41.z;
        var _distSqrEdge41 = _vX*_vX + _vY*_vY + _vZ*_vZ;
        
        return ((_distSqrEdge12 < _radiusSqr) || (_distSqrEdge23 < _radiusSqr) || (_distSqrEdge34 < _radiusSqr) || (_distSqrEdge41 < _radiusSqr));
    }
}